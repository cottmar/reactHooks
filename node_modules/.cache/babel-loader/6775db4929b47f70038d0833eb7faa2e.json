{"ast":null,"code":"import _slicedToArray from \"/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/src/Components/Todo.js\";\nimport React, { useState } from 'react';\n\nvar todo = function todo(props) {\n  // just caling a function provided by react (useState)\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoName = _useState2[0],\n      setTodoName = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todoList = _useState4[0],\n      setTodoList = _useState4[1];\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    setTodoName(event.target.value);\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    // since we are setting new value, we override the old one\n    // concat returns a new array\n    setTodoList(todoList.concat(todoName));\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoName[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nexport default todo; // useState tells us its a hook function\n// can pass anything into useState, whatever state you want to manage\n// gives first string as entire element inputState[0]\n// inputSTate[] is the reference to a function and reference when onchange triggers\n// function in a function is fine in JS","map":{"version":3,"sources":["/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/src/Components/Todo.js"],"names":["React","useState","todo","props","todoName","setTodoName","todoList","setTodoList","inputChangeHandler","event","target","value","todoAddHandler","concat"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACpB;AADoB,kBAIYF,QAAQ,CAAC,EAAD,CAJpB;AAAA;AAAA,MAIbG,QAJa;AAAA,MAIHC,WAJG;;AAAA,mBAKYJ,QAAQ,CAAC,EAAD,CALpB;AAAA;AAAA,MAKbK,QALa;AAAA,MAKHC,WALG;;AAOpB,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACpCJ,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFD;;AAIA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B;AACA;AACAL,IAAAA,WAAW,CAACD,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CAAD,CAAX;AACD,GAJD;;AAMA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AACG,IAAA,IAAI,EAAC,MADR;AAEG,IAAA,WAAW,EAAC,MAFf;AAGG,IAAA,QAAQ,EAAEI,kBAHb;AAIG,IAAA,KAAK,EAAEJ,QAAQ,CAAC,CAAD,CAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAML;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WANK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPK,CAAP;AAWD,CA5BD;;AA8BA,eAAeF,IAAf,C,CAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState} from 'react';\n\nconst todo = props => {\n  // just caling a function provided by react (useState)\n  // const inputState = useState('');\n\n  const [todoName, setTodoName] = useState('');\n  const [todoList, setTodoList] = useState([]);\n\n  const inputChangeHandler = (event) => {\n    setTodoName(event.target.value);\n  };\n\n  const todoAddHandler = () => {\n    // since we are setting new value, we override the old one\n    // concat returns a new array\n    setTodoList(todoList.concat(todoName));\n  }\n\n  return <React.Fragment>\n    <input\n       type=\"text\"\n       placeholder=\"Todo\"\n       onChange={inputChangeHandler}\n       value={todoName[0]}/>\n    <button type=\"button\">Add</button>\n    <ul>\n\n    </ul>\n  </React.Fragment>;\n}\n\nexport default todo;\n\n// useState tells us its a hook function\n// can pass anything into useState, whatever state you want to manage\n// gives first string as entire element inputState[0]\n// inputSTate[] is the reference to a function and reference when onchange triggers\n// function in a function is fine in JS"]},"metadata":{},"sourceType":"module"}