{"ast":null,"code":"import _slicedToArray from \"/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/src/Components/Todo.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nvar todo = function todo(props) {\n  // just caling a function provided by react (useState)\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoName = _useState2[0],\n      setTodoName = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todoList = _useState4[0],\n      setTodoList = _useState4[1]; // const [todoState, setTodoState] = useState({userInput: '', todoList: []});\n\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    setTodoName(event.target.value);\n  }; // since we are setting new value, we override the old one\n  // concat returns a new array\n\n\n  var todoAddHandler = function todoAddHandler() {\n    setTodoList(todoList.concat(todoName));\n    axios.post('https://reacthooks-b84d8.firebaseio.com/todos.json', {\n      name: todoName\n    }).then(function (res) {\n      console.log(res);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }; //   setTodoState({\n  //     userInput: todoState.userInput,\n  //     todoList: todoState.todoList.concat(todoState.userInput)\n  //   });\n  // };\n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, todoList.map(function (todo) {\n    return React.createElement(\"li\", {\n      key: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, todo);\n  })));\n};\n\nexport default todo; // useState tells us its a hook function\n// can pass anything into useState, whatever state you want to manage\n// gives first string as entire element inputState[0]\n// inputSTate[] is the reference to a function and reference when onchange triggers\n// function in a function is fine in JS\n// you can't call useState in a function of a function\n// cannot call useState in any form of nesting, only at the root","map":{"version":3,"sources":["/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/src/Components/Todo.js"],"names":["React","useState","axios","todo","props","todoName","setTodoName","todoList","setTodoList","inputChangeHandler","event","target","value","todoAddHandler","concat","post","name","then","res","console","log","catch","err","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACpB;AADoB,kBAIYH,QAAQ,CAAC,EAAD,CAJpB;AAAA;AAAA,MAIbI,QAJa;AAAA,MAIHC,WAJG;;AAAA,mBAKYL,QAAQ,CAAC,EAAD,CALpB;AAAA;AAAA,MAKbM,QALa;AAAA,MAKHC,WALG,kBAMpB;;;AAEA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACpCJ,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFD,CARoB,CAYpB;AACA;;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BL,IAAAA,WAAW,CAACD,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CAAD,CAAX;AACAH,IAAAA,KAAK,CAACa,IAAN,CAAW,oDAAX,EAAiE;AAACC,MAAAA,IAAI,EAAEX;AAAP,KAAjE,EACGY,IADH,CACQ,UAAAC,GAAG,EAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAHH,EAIGG,KAJH,CAIS,UAAAC,GAAG,EAAI;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KANH;AAOD,GATD,CAdoB,CAwBpB;AACA;AACA;AACA;AACA;;;AAEA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AACG,IAAA,IAAI,EAAC,MADR;AAEG,IAAA,WAAW,EAAC,MAFf;AAGG,IAAA,QAAQ,EAAEb,kBAHb;AAIG,IAAA,KAAK,EAAEJ,QAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAOL;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEQ,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAPK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QAAQ,CAACgB,GAAT,CAAa,UAAApB,IAAI;AAAA,WACf;AAAI,MAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBA,IAAhB,CADe;AAAA,GAAjB,CADH,CARK,CAAP;AAcD,CA5CD;;AA8CA,eAAeA,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState} from 'react';\nimport axios from 'axios';\n\nconst todo = props => {\n  // just caling a function provided by react (useState)\n  // const inputState = useState('');\n\n  const [todoName, setTodoName] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  // const [todoState, setTodoState] = useState({userInput: '', todoList: []});\n\n  const inputChangeHandler = (event) => {\n    setTodoName(event.target.value);\n  };\n\n  // since we are setting new value, we override the old one\n  // concat returns a new array\n  const todoAddHandler = () => {\n    setTodoList(todoList.concat(todoName));\n    axios.post('https://reacthooks-b84d8.firebaseio.com/todos.json', {name: todoName})\n      .then(res => {\n        console.log(res)\n      })\n      .catch(err => {\n        console.log(err)\n      });\n  };\n  //   setTodoState({\n  //     userInput: todoState.userInput,\n  //     todoList: todoState.todoList.concat(todoState.userInput)\n  //   });\n  // };\n\n  return <React.Fragment>\n    <input\n       type=\"text\"\n       placeholder=\"Todo\"\n       onChange={inputChangeHandler}\n       value={todoName}\n       />\n    <button type=\"button\" onClick={todoAddHandler}>Add</button>\n    <ul>\n      {todoList.map(todo => (\n         <li key={todo}>{todo}</li>\n      ))}\n    </ul>\n  </React.Fragment>;\n}\n\nexport default todo;\n\n// useState tells us its a hook function\n// can pass anything into useState, whatever state you want to manage\n// gives first string as entire element inputState[0]\n// inputSTate[] is the reference to a function and reference when onchange triggers\n// function in a function is fine in JS\n// you can't call useState in a function of a function\n// cannot call useState in any form of nesting, only at the root"]},"metadata":{},"sourceType":"module"}