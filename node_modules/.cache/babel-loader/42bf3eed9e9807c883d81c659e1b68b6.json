{"ast":null,"code":"import _slicedToArray from \"/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/src/Components/Todo.js\";\nimport React, { useState } from 'react';\n\nvar todo = function todo(props) {\n  // just caling a function provided by react (useState)\n  // const inputState = useState('');\n  // const [todoName, setTodoName] = useState('');\n  var _useState = useState({\n    userInput: '',\n    todoList: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoState = _useState2[0],\n      setTodoState = _useState2[1];\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    setTodoState({\n      userInput: event.target.value,\n      todoList: todoState.todoList\n    });\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    // since we are setting new value, we override the old one\n    // concat returns a new array\n    // setTodoList(todoList.concat(todoName));\n    setTodoState({\n      userInput: todoState.userInput,\n      todoList: todoState.todoList.concat(todoState.userInput)\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, todoList.map(function (todo) {\n    return React.createElement(\"li\", {\n      key: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, todo);\n  })));\n};\n\nexport default todo; // useState tells us its a hook function\n// can pass anything into useState, whatever state you want to manage\n// gives first string as entire element inputState[0]\n// inputSTate[] is the reference to a function and reference when onchange triggers\n// function in a function is fine in JS","map":{"version":3,"sources":["/Users/caraottmar/PersonalProjects/react/react-refresh/hooks/reactHooks/src/Components/Todo.js"],"names":["React","useState","todo","props","userInput","todoList","todoState","setTodoState","inputChangeHandler","event","target","value","todoAddHandler","concat","todoName","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACpB;AACA;AAEA;AAJoB,kBAMcF,QAAQ,CAAC;AAACG,IAAAA,SAAS,EAAE,EAAZ;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CANtB;AAAA;AAAA,MAMbC,SANa;AAAA,MAMFC,YANE;;AAQpB,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACpCF,IAAAA,YAAY,CAAC;AACXH,MAAAA,SAAS,EAAEK,KAAK,CAACC,MAAN,CAAaC,KADb;AAEXN,MAAAA,QAAQ,EAAEC,SAAS,CAACD;AAFT,KAAD,CAAZ;AAID,GALD;;AAOA,MAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B;AACA;AACA;AACAL,IAAAA,YAAY,CAAC;AACXH,MAAAA,SAAS,EAAEE,SAAS,CAACF,SADV;AAEXC,MAAAA,QAAQ,EAAEC,SAAS,CAACD,QAAV,CAAmBQ,MAAnB,CAA0BP,SAAS,CAACF,SAApC;AAFC,KAAD,CAAZ;AAID,GARD;;AAUA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AACG,IAAA,IAAI,EAAC,MADR;AAEG,IAAA,WAAW,EAAC,MAFf;AAGG,IAAA,QAAQ,EAAEI,kBAHb;AAIG,IAAA,KAAK,EAAEM,QAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAOL;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEF,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAPK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QAAQ,CAACU,GAAT,CAAa,UAAAb,IAAI;AAAA,WACf;AAAI,MAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBA,IAAhB,CADe;AAAA,GAAjB,CADH,CARK,CAAP;AAcD,CAvCD;;AAyCA,eAAeA,IAAf,C,CAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState} from 'react';\n\nconst todo = props => {\n  // just caling a function provided by react (useState)\n  // const inputState = useState('');\n\n  // const [todoName, setTodoName] = useState('');\n  // const [todoList, setTodoList] = useState([]);\n  const [todoState, setTodoState] = useState({userInput: '', todoList: []});\n\n  const inputChangeHandler = (event) => {\n    setTodoState({\n      userInput: event.target.value,\n      todoList: todoState.todoList\n    });\n  };\n\n  const todoAddHandler = () => {\n    // since we are setting new value, we override the old one\n    // concat returns a new array\n    // setTodoList(todoList.concat(todoName));\n    setTodoState({\n      userInput: todoState.userInput,\n      todoList: todoState.todoList.concat(todoState.userInput)\n    });\n  };\n\n  return <React.Fragment>\n    <input\n       type=\"text\"\n       placeholder=\"Todo\"\n       onChange={inputChangeHandler}\n       value={todoName}\n       />\n    <button type=\"button\" onClick={todoAddHandler}>Add</button>\n    <ul>\n      {todoList.map(todo => (\n         <li key={todo}>{todo}</li>\n      ))}\n    </ul>\n  </React.Fragment>;\n}\n\nexport default todo;\n\n// useState tells us its a hook function\n// can pass anything into useState, whatever state you want to manage\n// gives first string as entire element inputState[0]\n// inputSTate[] is the reference to a function and reference when onchange triggers\n// function in a function is fine in JS"]},"metadata":{},"sourceType":"module"}